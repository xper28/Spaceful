{"version":3,"sources":["components/jumbotron.js","components/missionSt.js","App.js","serviceWorker.js","index.js","assets/cube.svg"],"names":["JumboTron","color","bg","backgroundImage","style","display","alignItems","marginRight","src","logo","heigh","width","href","mt","React","Component","MissionSt","state","textAlign","styles","pricingHolder","pricing","tierName","price","billingType","sellingPoints","margin","flexGrow","JustifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iPAkBqBA,E,iLAEjB,OACE,kBAAC,OAAD,CAAMC,MAAM,QAAQC,GAAG,SAASC,gBAAgB,kBAC9C,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,WAAY,WACzC,kBAAC,UAAD,CAASF,MAAO,CAAEG,YAAa,KAA/B,YACA,yBAAKC,IAAKC,IAAML,MAAO,CAAEM,MAAO,GAAIC,MAAO,OAE7C,kBAAC,UAAD,CAASV,MAAM,SAAf,2DAC0D,6BAD1D,2DAIA,kBAAC,eAAD,CAAcW,KAAK,mBAAmBC,GAAI,GAA1C,eAGA,kBAAC,sBAAD,W,GAf+BC,IAAMC,WCVvCC,E,2MACJC,MAAQ,G,wEAEN,OACE,6BACE,kBAAC,UAAD,CAASC,UAAU,UAAnB,WACA,yBAAKd,MAAOe,EAAOC,eACjB,kBAAC,cAAD,CACEhB,MAAOe,EAAOE,QACdnB,GAAG,SACHoB,SAAS,UACTC,MAAM,SACNC,YAAY,GACZC,cAAe,CAAC,gCAAuB,uCAEvC,kBAAC,eAAD,CAAcvB,GAAG,QAAQS,MAAO,EAAGE,GAAG,QAAtC,cAKF,kBAAC,cAAD,CACET,MAAOe,EAAOE,QACdnB,GAAG,SACHoB,SAAS,iBACTC,MAAM,SACNC,YAAY,GACZC,cAAe,CAAC,gCAAuB,oCAEvC,kBAAC,eAAD,CAAcvB,GAAG,QAAQS,MAAO,EAAGE,GAAG,QAAtC,cAKF,kBAAC,cAAD,CACET,MAAOe,EAAOE,QACdnB,GAAG,SACHoB,SAAS,YACTC,MAAM,SACNC,YAAY,GACZC,cAAe,CAAC,gCAAuB,oCAEvC,kBAAC,eAAD,CAAcvB,GAAG,QAAQS,MAAO,EAAGE,GAAG,QAAtC,oB,GAzCYE,aAmDlBI,EAAS,CACbE,QAAS,CACPK,OAAQ,OACRC,SAAU,EACVrB,WAAY,UAEdc,cAAe,CACbf,QAAS,OACTuB,eAAgB,eAChBjB,MAAO,IACPe,OAAQ,WAIGV,ICxDAa,E,2MAXbZ,MAAQ,G,wEAEN,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUF,aCOEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.be25f6dd.chunk.js","sourcesContent":["import React, { Component, Flex } from \"react\";\r\nimport {\r\n  ButtonDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\nimport {\r\n  Hero,\r\n  CallToAction,\r\n  ScrollDownIndicator,\r\n  Phone,\r\n  Heading,\r\n  Subhead\r\n} from \"react-landing-page\";\r\nimport logo from \"../assets/cube.svg\";\r\n//import background from \"../../public/background.jpg\";\r\n\r\nexport default class JumboTron extends React.Component {\r\n  render() {\r\n    return (\r\n      <Hero color=\"black\" bg=\"f3efee\" backgroundImage=\"background.jpg\">\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Heading style={{ marginRight: 10 }}>Spaceful</Heading>\r\n          <img src={logo} style={{ heigh: 64, width: 64 }} />\r\n        </div>\r\n        <Subhead color=\"black\">\r\n          Need a quick workspace to hammer a couple of documents? <br /> On\r\n          business abroad and need an office to do your work?\r\n        </Subhead>\r\n        <CallToAction href=\"/getting-started\" mt={3}>\r\n          Get Started\r\n        </CallToAction>\r\n        <ScrollDownIndicator />\r\n      </Hero>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, Flex } from \"react\";\r\nimport {\r\n  Section,\r\n  Heading,\r\n  PricingTier,\r\n  CallToAction\r\n} from \"react-landing-page\";\r\n\r\nclass MissionSt extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Heading textAlign=\"center\">Pricing</Heading>\r\n        <div style={styles.pricingHolder}>\r\n          <PricingTier\r\n            style={styles.pricing}\r\n            bg=\"silver\"\r\n            tierName=\"Cubicle\"\r\n            price=\"$15/hr\"\r\n            billingType=\"\"\r\n            sellingPoints={[\"ðŸ”¥ WiFi-Coffee-Beer\", \"ðŸ“‘ Printing and scanning\"]}\r\n          >\r\n            <CallToAction bg=\"black\" width={1} mt=\"auto\">\r\n              Book now!\r\n            </CallToAction>\r\n          </PricingTier>\r\n\r\n          <PricingTier\r\n            style={styles.pricing}\r\n            bg=\"silver\"\r\n            tierName=\"Private Office\"\r\n            price=\"$20/hr\"\r\n            billingType=\"\"\r\n            sellingPoints={[\"ðŸ”¥ WiFi-Coffee-Beer\", \"ðŸ“‘ Comprehensive docs\"]}\r\n          >\r\n            <CallToAction bg=\"black\" width={1} mt=\"auto\">\r\n              Book now!\r\n            </CallToAction>\r\n          </PricingTier>\r\n\r\n          <PricingTier\r\n            style={styles.pricing}\r\n            bg=\"silver\"\r\n            tierName=\"Boardroom\"\r\n            price=\"$30/hr\"\r\n            billingType=\"\"\r\n            sellingPoints={[\"ðŸ”¥ WiFi-Coffee-Beer\", \"ðŸ“‘ Comprehensive docs\"]}\r\n          >\r\n            <CallToAction bg=\"black\" width={1} mt=\"auto\">\r\n              Book now!\r\n            </CallToAction>\r\n          </PricingTier>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  pricing: {\r\n    margin: \"1rem\",\r\n    flexGrow: 1,\r\n    alignItems: \"center\"\r\n  },\r\n  pricingHolder: {\r\n    display: \"flex\",\r\n    JustifyContent: \"space-evenly\",\r\n    width: 900,\r\n    margin: \"0 auto\"\r\n  }\r\n};\r\n\r\nexport default MissionSt;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport JumboTron from \"./components/jumbotron\";\nimport MissionSt from \"./components/missionSt\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <JumboTron />\n        <MissionSt />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst styles = {};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cube.be002561.svg\";"],"sourceRoot":""}